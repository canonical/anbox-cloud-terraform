name: Build/Test

on:
  workflow_call:

jobs:
  static-checks:
    name: Static Checks
    runs-on: [self-hosted, linux, ARM64, jammy, medium]
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Setup Terraform
        run:
          sudo snap install terraform --channel latest/stable --classic
      - name: Setup TFLint
        run:
          # This is the revision corresponding to the ARM architecture
          sudo snap install tflint --revision 94
      - name: Run terraform fmt check
        run: terraform fmt -check -diff -recursive .
      - name: Run terraform init
        run: terraform init
      - name: Run terraform validate
        run: terraform validate
      # Print TFLint version
      - name: Run tflint checks
        run: |
          tflint --version
          # Install plugins
          tflint --init
          # Run tflint command in each directory recursively # use --force if you want to continue with workflow although errors are there
          tflint -f compact --recursive

  tests:
    name: Run terraform tests
    runs-on: [self-hosted, linux, X64, jammy, large]
    env:
      UBUNTU_PRO_TOKEN: ${{ secrets.UBUNTU_PRO_TOKEN }}
      ANBOX_CHANNEL: 1.26/stable
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Setup Terraform
        run:
          sudo snap install terraform --channel latest/stable --classic
      - name: Setup operator environment
        uses: charmed-kubernetes/actions-operator@1c7c9a30d7d233e26e7a4fc1505cc44bbd937229
        with:
          provider: lxd
      - name: Run Main Module Unit Tests
        run: |
          terraform init && terraform test
      - name: Run Submodule Unit Tests
        working-directory: ./modules
        run: |
          set -e
          for module in ./*; do
            pushd $module
            terraform init && terraform test
            popd
          done
      - name: Deploy Main Plan
        run: |
          cat <<EOF > ci.tfvars
          anbox_channel  = "${ANBOX_CHANNEL}"
          subclusters = [
            {
              name           = "a"
              lxd_node_count = 1
              registry = {
                mode   = "client"
              }
            }
          ]
          deploy_registry=true
          EOF

          terraform init && terraform apply -parallelism=1 -auto-approve -var "ubuntu_pro_token=${UBUNTU_PRO_TOKEN}" -var-file='ci.tfvars'

      - name: Wait for models to get active
        run: |
          models="$( terraform output -json anbox_models | jq -r '.[] | @sh' | tr -d \' )"
          for model in $models; do
              juju wait-for model $model --query='life=="alive" && status=="available" && forEach(applications, app => app.status == "active")' &
          done
          wait
          echo "All models deployed successfully"

